/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/app/swagger.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение json файла схемы апи */
        get: operations["AppController_getSwaggerJson"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/app/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Проверка работоспособности API */
        get: operations["AppController_healthCheck"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Регистрация нового пользователя */
        post: operations["AuthController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Вход пользователя в систему */
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Обновление токенов доступа */
        post: operations["AuthController_refreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Выход пользователя из системы */
        post: operations["AuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login/telegram": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Вход через Telegram */
        post: operations["AuthController_loginTelegram"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/qr-code/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Генерация QR-кода для авторизации */
        post: operations["AuthController_generateQRCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/qr-code/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Подтверждение авторизации по QR-коду */
        post: operations["AuthController_confirmQRCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/qr-code/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Авторизация по QR-коду */
        post: operations["AuthController_loginWithQRCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка пользователей */
        get: operations["UsersController_findAll"];
        put?: never;
        /** Создание нового пользователя */
        post: operations["UsersController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение информации о текущем пользователе */
        get: operations["UsersController_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение пользователя по ID */
        get: operations["UsersController_findById"];
        put?: never;
        post?: never;
        /** Удаление пользователя */
        delete: operations["UsersController_remove"];
        options?: never;
        head?: never;
        /** Обновление данных пользователя */
        patch: operations["UsersController_update"];
        trace?: never;
    };
    "/api/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка игр или поиск игр по названию */
        get: operations["GamesController_findAll"];
        put?: never;
        /** Создание новой игры */
        post: operations["GamesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/games/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение игры по ID */
        get: operations["GamesController_findOne"];
        put?: never;
        post?: never;
        /** Удаление игры */
        delete: operations["GamesController_remove"];
        options?: never;
        head?: never;
        /** Обновление данных игры */
        patch: operations["GamesController_update"];
        trace?: never;
    };
    "/api/patch-notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка патч-нотов */
        get: operations["PatchNotesController_findAll"];
        put?: never;
        /** Создание нового патч-нота */
        post: operations["PatchNotesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/patch-notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение патч-нота по ID */
        get: operations["PatchNotesController_findOne"];
        put?: never;
        post?: never;
        /** Удаление патч-нота */
        delete: operations["PatchNotesController_remove"];
        options?: never;
        head?: never;
        /** Обновление данных патч-нота */
        patch: operations["PatchNotesController_update"];
        trace?: never;
    };
    "/api/subscriptions/games": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка игр для подписки */
        get: operations["SubscriptionsController_getGames"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка подписок пользователя */
        get: operations["SubscriptionsController_findAll"];
        put?: never;
        /** Создание новой подписки */
        post: operations["SubscriptionsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/{gameId}/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение подписки по ID игры и ID приложения */
        get: operations["SubscriptionsController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Удаление подписки */
        delete: operations["SubscriptionsController_remove"];
        options?: never;
        head?: never;
        /** Обновление данных подписки */
        patch: operations["SubscriptionsController_update"];
        trace?: never;
    };
    "/api/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение списка приложений */
        get: operations["AppsController_findAll"];
        put?: never;
        /** Создание нового приложения */
        post: operations["AppsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/apps/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение приложения по ID */
        get: operations["AppsController_findOne"];
        put?: never;
        post?: never;
        /** Удаление приложения */
        delete: operations["AppsController_remove"];
        options?: never;
        head?: never;
        /** Обновление данных приложения */
        patch: operations["AppsController_update"];
        trace?: never;
    };
    "/api/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение записи настроек */
        get: operations["SettingsController_getSettings"];
        put?: never;
        /** Создание записи настроек */
        post: operations["SettingsController_createSettings"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/settings/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получение записи настроек по ID */
        get: operations["SettingsController_getSettingsById"];
        put?: never;
        post?: never;
        /** Удаление записи настроек */
        delete: operations["SettingsController_deleteSettings"];
        options?: never;
        head?: never;
        /** Изменение записи настроек */
        patch: operations["SettingsController_updateSettings"];
        trace?: never;
    };
    "/api/updates/request": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Запрос на обновление */
        post: operations["UpdatesController_requestUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/request_system": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Запрос на обновление */
        post: operations["UpdatesController_requestUpdateSystem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить запрос на обновление по ID */
        get: operations["UpdatesController_getUpdateRequest"];
        put?: never;
        post?: never;
        /** Удалить запрос на обновление */
        delete: operations["UpdatesController_deleteUpdateRequest"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/updates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список запросов на обновление */
        get: operations["UpdatesController_getUpdateRequests"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BadRequestResponseDto: {
            /** @example 400 */
            statusCode: number;
            /** @example Bad Request */
            message: string;
            /** @example Validation failed */
            error: string;
        };
        ForbiddenResponseDto: {
            /** @example 403 */
            statusCode: number;
            /** @example Forbidden */
            message: string;
            /** @example Forbidden */
            error: string;
        };
        NotFoundResponseDto: {
            /** @example 404 */
            statusCode: number;
            /** @example Not Found */
            message: string;
            /** @example Not Found */
            error: string;
        };
        InternalServerErrorResponseDto: {
            /** @example 500 */
            statusCode: number;
            /** @example Internal Server Error */
            message: string;
            /** @example Internal Server Error */
            error: string;
        };
        File: Record<string, never>;
        RegisterDto: {
            /**
             * @description ID пользователя в Telegram
             * @example 6234567890
             */
            id: string;
            /**
             * @description Имя пользователя
             * @example John
             */
            firstName: string;
            /**
             * @description Фамилия пользователя
             * @example Doe
             */
            lastName: string;
            /**
             * @description Имя пользователя в Telegram
             * @example username
             */
            username: string;
            /**
             * @description Пароль пользователя (необязательно)
             * @example password123
             */
            password?: string;
            /**
             * @description Языковые настройки пользователя
             * @example en
             */
            languageCode: string;
            /**
             * @description Премиум пользователь
             * @example true
             */
            is_premium: boolean;
            /**
             * @description Является ли пользователь ботом
             * @example false
             */
            isBot: boolean;
            /**
             * @description Добавлен в меню пользователя
             * @example true
             */
            added_to_attachment_menu: boolean;
            /**
             * @description Роль пользователя
             * @example admin
             * @enum {string}
             */
            role: "ADMIN" | "USER" | "GUEST";
        };
        LoginDto: {
            /**
             * @description Логин пользователя
             * @example username
             */
            username: string;
            /**
             * @description Пароль пользователя
             * @example StrongP@ssworD!
             */
            password: string;
        };
        GenerateQRCodeResponseDto: {
            /** @description Код для авторизации */
            code: string;
            /** @description Дата истечения действительности кода */
            expiresAt: string;
        };
        ConformCodeDto: {
            /**
             * @description Код авторизации
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            code: string;
        };
        LoginWithCodeDto: {
            /**
             * @description Код для авторизации
             * @example d067dddc-b645-4154-b571-c22a9dcf26af
             */
            code: string;
        };
        CreateUserDto: {
            /**
             * @description ID пользователя в Telegram
             * @example 6234567890
             */
            id: string;
            /**
             * @description Имя пользователя
             * @example John
             */
            firstName: string;
            /**
             * @description Фамилия пользователя
             * @example Doe
             */
            lastName: string;
            /**
             * @description Имя пользователя в Telegram
             * @example username
             */
            username: string;
            /**
             * @description Пароль пользователя (необязательно)
             * @example password123
             */
            password?: string;
            /**
             * @description Языковые настройки пользователя
             * @example en
             */
            languageCode: string;
            /**
             * @description Премиум пользователь
             * @example true
             */
            isPremium: boolean;
            /**
             * @description Является ли пользователь ботом
             * @example false
             */
            isBot: boolean;
            /**
             * @description Добавлен в меню пользователя
             * @example true
             */
            addedToAttachMenu: boolean;
            /**
             * @description Пользователь разрешает писать в личные сообщения
             * @example true
             */
            allowsWriteToPm: boolean;
            /**
             * @description Роль пользователя
             * @example admin
             * @enum {string}
             */
            role: "ADMIN" | "USER" | "GUEST";
        };
        Game: {
            /**
             * @description ID игры
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Название игры
             * @example Counter-Strike 2
             */
            name: string;
            /**
             * @description Ссылка на изображение
             * @example https://example.com/image.jpg
             */
            image: string | null;
            /**
             * @description Версия игры
             * @example 2
             */
            version?: number | null;
        };
        User: {
            /**
             * @description ID Пользователя
             * @example 12345678
             */
            id: string;
            /**
             * @description Логин пользователя
             * @example username
             */
            username: string;
            /**
             * @description Имя пользователя
             * @example Иван
             */
            firstName: string;
            /**
             * @description Фамилия пользователя
             * @example Иванов
             */
            lastName: string | null;
            /**
             * @description Язык пользователя
             * @example ru
             */
            languageCode: string | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            isBot: boolean | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            allowsWriteToPm: boolean | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            addedToAttachMenu: boolean | null;
            /**
             * @description Роль пользователя
             * @example GUEST
             * @enum {string}
             */
            role: "ADMIN" | "USER" | "GUEST";
            /**
             * @description API Ключ пользователя
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            apiKey: string;
            /** @description Подписки пользователя */
            subscriptions: components["schemas"]["Game"] | null;
        };
        GetUsersResponseDto: {
            /** @description Список пользователей */
            data: components["schemas"]["User"][];
            /**
             * @description Текущая страница пагинации
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей на одной странице
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        GetMeResponseDto: {
            /**
             * @description ID Пользователя
             * @example 12345678
             */
            id: string;
            /**
             * @description Логин пользователя
             * @example username
             */
            username: string;
            /**
             * @description Имя пользователя
             * @example Иван
             */
            firstName: string;
            /**
             * @description Фамилия пользователя
             * @example Иванов
             */
            lastName: string | null;
            /**
             * @description Язык пользователя
             * @example ru
             */
            languageCode: string | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            isBot: boolean | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            allowsWriteToPm: boolean | null;
            /**
             * @description Является ли пользователь ботом
             * @example true
             */
            addedToAttachMenu: boolean | null;
            /**
             * @description Роль пользователя
             * @example GUEST
             * @enum {string}
             */
            role: "ADMIN" | "USER" | "GUEST";
            /**
             * @description API Ключ пользователя
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            apiKey: string;
            /** @description Подписки пользователя */
            subscriptions: components["schemas"]["Game"] | null;
        };
        UpdateUserDto: {
            /**
             * @description ID пользователя в Telegram
             * @example 6234567890
             */
            id?: string;
            /**
             * @description Имя пользователя
             * @example John
             */
            firstName?: string;
            /**
             * @description Фамилия пользователя
             * @example Doe
             */
            lastName?: string;
            /**
             * @description Имя пользователя в Telegram
             * @example username
             */
            username?: string;
            /**
             * @description Пароль пользователя (необязательно)
             * @example password123
             */
            password?: string;
            /**
             * @description Языковые настройки пользователя
             * @example en
             */
            languageCode?: string;
            /**
             * @description Премиум пользователь
             * @example true
             */
            isPremium?: boolean;
            /**
             * @description Является ли пользователь ботом
             * @example false
             */
            isBot?: boolean;
            /**
             * @description Добавлен в меню пользователя
             * @example true
             */
            addedToAttachMenu?: boolean;
            /**
             * @description Пользователь разрешает писать в личные сообщения
             * @example true
             */
            allowsWriteToPm?: boolean;
            /**
             * @description Роль пользователя
             * @example admin
             * @enum {string}
             */
            role?: "ADMIN" | "USER" | "GUEST";
        };
        CreateGameDto: {
            /**
             * @description Название игры
             * @example Counter-Strike 2
             */
            name: string;
            /**
             * @description ID приложений, к которым привязана игра
             * @example [
             *       "cm1tcu28u00007y09qgrm32hy",
             *       "cm1tcu28u00007y09qgrm32hz"
             *     ]
             */
            appIds: string[];
            /**
             * @description Версия игры
             * @example 2
             */
            version?: number;
            /**
             * Format: binary
             * @description Image file for the game
             */
            image?: string;
        };
        GetGamesResponseDto: {
            /** @description Список игр */
            data: components["schemas"]["Game"][];
            /**
             * @description Текущий номер страницы
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей для одной страницы
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        UpdateGameDto: {
            /**
             * @description Название игры
             * @example Counter-Strike 2
             */
            name?: string;
            /**
             * @description ID приложений, к которым привязана игра
             * @example [
             *       "cm1tcu28u00007y09qgrm32hy",
             *       "cm1tcu28u00007y09qgrm32hz"
             *     ]
             */
            appIds?: string[];
            /**
             * @description Версия игры
             * @example 2
             */
            version?: number;
            /**
             * Format: binary
             * @description Image file for the game
             */
            image?: string;
        };
        CreatePatchNoteDto: {
            /**
             * @description Заголовок патч-нота
             * @example Обновление 2.0
             */
            title: string;
            /**
             * @description Содержание патч-нота
             * @example В этом обновлении мы добавили новые функции...
             */
            content: string;
            /**
             * @description Версия обновления
             * @example 2.0.1
             */
            version?: string;
            /**
             * @description Дата выпуска патча
             * @example 2023-04-01T00:00:00Z
             */
            releaseDate: string;
            /**
             * @description ID игры, к которой относится патч-нот
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            gameId: string;
            /**
             * @description ID приложения, к которому относится игра
             * @example с4fghor1d2fgnf
             */
            appId: string;
        };
        PatchNote: {
            /**
             * @description ID патч-нота
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Заголовок патч-нота
             * @example Обновление 2.0
             */
            title: string;
            /**
             * @description Содержание патч-нота
             * @example В этом обновлении мы добавили новые функции...
             */
            content: string;
            /**
             * @description Версия обновления
             * @example 2.0.1
             */
            version?: string;
            /**
             * Format: date-time
             * @description Дата выпуска патча
             */
            releaseDate: string;
            /**
             * @description ID игры, к которой относится патч-нот
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            gameId: string;
            /**
             * @description ID приложения, к которой относится игра
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            appId: string;
            /**
             * Format: date-time
             * @description Дата создания записи
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Дата обновления записи
             */
            updatedAt: string;
        };
        GetPatchNotesResponseDto: {
            /** @description Список игр */
            data: components["schemas"]["PatchNote"][];
            /**
             * @description Текущий номер страницы
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей для одной страницы
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        UpdatePatchNoteDto: {
            /**
             * @description Заголовок патч-нота
             * @example Обновление 2.0
             */
            title?: string;
            /**
             * @description Содержание патч-нота
             * @example В этом обновлении мы добавили новые функции...
             */
            content?: string;
            /**
             * @description Версия обновления
             * @example 2.0.1
             */
            version?: string;
            /**
             * @description Дата выпуска патча
             * @example 2023-04-01T00:00:00Z
             */
            releaseDate?: string;
            /**
             * @description ID игры, к которой относится патч-нот
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            gameId?: string;
            /**
             * @description ID приложения, к которому относится игра
             * @example с4fghor1d2fgnf
             */
            appId?: string;
        };
        CreateSubscriptionDto: {
            /**
             * @description ID игры для подписки
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            gameId: string;
            /**
             * @description ID приложения для подписки
             * @example cm1ylkvpw0000ghyluqi9cmey
             */
            appId: string;
            /**
             * @description Статус подписки
             * @example true
             */
            isSubscribed: boolean;
        };
        App: {
            /**
             * @description ID приложения
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Название приложения
             * @example Steam
             */
            name: string;
            /**
             * @description Ссылка на изображение
             * @example https://example.com/image.jpg
             */
            image: string | null;
        };
        SubscriptionResponseDto: {
            /** @description Уникальный идентификатор подписки */
            id: string;
            /** @description Статус подписки (активна/неактивна) */
            isSubscribed: boolean;
            /** @description Информация о приложении */
            app: components["schemas"]["App"];
            /** @description Информация об игре */
            game: components["schemas"]["Game"];
        };
        GetSubscriptionsResponseDto: {
            /** @description Список подписок */
            data: components["schemas"]["SubscriptionResponseDto"][];
            /**
             * @description Текущий номер страницы
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей для одной страницы
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        UpdateSubscriptionDto: {
            /**
             * @description ID игры для подписки
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            gameId?: string;
            /**
             * @description ID приложения для подписки
             * @example cm1ylkvpw0000ghyluqi9cmey
             */
            appId?: string;
            /**
             * @description Статус подписки
             * @example true
             */
            isSubscribed?: boolean;
        };
        AppResponseDto: {
            /** @description Array of apps */
            data: components["schemas"]["App"][];
            /**
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * @description Number of items per page
             * @example 10
             */
            perPage: number;
            /**
             * @description Total number of items
             * @example 100
             */
            total: number;
            /**
             * @description Total number of pages
             * @example 10
             */
            pageCount: number;
        };
        Settings: {
            /**
             * @description ID настроек
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description ID приложения
             * @example app123
             */
            appId: string;
            /**
             * @description ID игры
             * @example game456
             */
            gameId: string;
            /** @description Название приложения, которое вызывает обновление */
            executorName: string;
            /** @description Команда, запускающая обновление */
            updateCommand: string;
        };
        GetSettingsResponseDto: {
            /** @description Список настроек */
            data: components["schemas"]["Settings"][];
            /**
             * @description Текущий номер страницы
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей для одной страницы
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        CreateSettingsDto: {
            /** @description ID Приложения для привязки настроек */
            appId: string;
            /** @description ID Игры для привязки настроек */
            gameId: string;
            /** @description Название сервиса, вызывающего обновление */
            executorName: string;
            /** @description Команда для вызова обновления */
            updateCommand: string;
        };
        UpdateSettingsDto: {
            /**
             * @description ID Приложения для привязки настроек
             * @example cm290opm9000411j214og5yij
             */
            appId: string;
            /**
             * @description ID Игры для привязки настроек
             * @example 0dc3564a-4511-4b74-a070-61dc1d07ec12
             */
            gameId: string;
            /**
             * @description Название сервиса, вызывающего обновление
             * @example steam
             */
            executorName: string;
            /**
             * @description Команда для вызова обновления
             * @example +login anonymous +app_update 90 validate +quit
             */
            updateCommand: string;
        };
        CreateUpdateRequestDto: {
            /** @description ID игры */
            gameId: string;
            /** @description ID приложения */
            appId: string;
        };
        UpdateRequest: {
            /** @description Уникальный идентификатор запроса на обновление */
            id: string;
            /**
             * @description Статус запроса на обновление
             * @enum {string}
             */
            status: "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED";
            /** @description ID игры */
            gameId: string;
            /** @description ID приложения */
            appId: string;
            /** @description ID пользователя, создавшего запрос */
            userId: string;
            /**
             * Format: date-time
             * @description Дата и время создания запроса
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Дата и время последнего обновления запроса
             */
            updatedAt: string;
        };
        CreateUpdateRequestWithSystemDto: {
            /** @description ID игры */
            gameId: string;
            /** @description ID приложения */
            appId: string;
            /** @description ID пользователя */
            userId: string;
        };
        GetUpdateRequestsResponseDto: {
            /** @description Список игр */
            data: components["schemas"]["UpdateRequest"][];
            /**
             * @description Текущий номер страницы
             * @example 1
             */
            page: number;
            /**
             * @description Количество записей для одной страницы
             * @example 10
             */
            perPage: number;
            /**
             * @description Общее количество записей
             * @example 100
             */
            total: number;
            /**
             * @description Общее количество страниц
             * @example 10
             */
            pageCount: number;
        };
        UnauthorizedResponseDto: {
            /** @example 401 */
            statusCode: number;
            /** @example Unauthorized */
            message: string;
            /** @example Unauthorized */
            error: string;
        };
        ConflicResponseDto: {
            /** @example 409 */
            statusCode: number;
            /** @example Conflict */
            message: string;
            /** @example Conflict */
            error: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getSwaggerJson: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Файл схемы успешно получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["File"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Файл схемы не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppController_healthCheck: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API работает нормально */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example ok */
                        status?: string;
                        /** @example API is up and running */
                        message?: string;
                    };
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Параметры регистрации */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            /** @description Пользователь успешно зарегистрирован */
            201: {
                headers: {
                    /** @description AccessToken и RefreshToken устанавливаются в куки */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные данные для регистрации */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Параметры авторизации */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            /** @description Пользователь успешно авторизован */
            200: {
                headers: {
                    /** @description AccessToken и RefreshToken устанавливаются в куки */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Неверные данные для входа */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_refreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Токены успешно обновлены */
            200: {
                headers: {
                    /** @description Новые AccessToken и RefreshToken устанавливаются в куки */
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Невалидный или просроченный RefreshToken */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пользователь успешно вышел из системы */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Пользователь не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_loginTelegram: {
        parameters: {
            query?: never;
            header?: {
                /** @description Telegram Web App Data (format: "tma <initDataRaw>") */
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Успешная аутентификация через Telegram */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Неверные данные для входа */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_generateQRCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description QR-код успешно сгенерирован */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateQRCodeResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_confirmQRCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Код подтверждения */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConformCodeDto"];
            };
        };
        responses: {
            /** @description Авторизация по QR-коду подтверждена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AuthController_loginWithQRCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Данные для авторизации по qr колу */
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginWithCodeDto"];
            };
        };
        responses: {
            /** @description Успешная авторизация по QR-коду */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: {
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пользователи найдены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUsersResponseDto"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для просмотра списка пользователей */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователи не найдены */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserDto"];
            };
        };
        responses: {
            /** @description Пользователь успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для создания пользователя */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Пользователь с такой почтой уже существует */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_getCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Информация о пользователе получена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Пользователь не авторизован */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UsersController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пользователь найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для просмотра информации о пользователе */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Пользователь успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для удаления пользователя */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserDto"];
            };
        };
        responses: {
            /** @description Данные пользователя успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для изменения данных пользователя */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Пользователь с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GamesController_findAll: {
        parameters: {
            query?: {
                /** @description ID приложения для фильтрации игр */
                appId?: string;
                /** @description Название приложения для фильтрации игр */
                appName?: string;
                /** @description Название игры для поиска */
                name?: string;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список игр получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGamesResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра списка игр */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Ошибка сервера при получении списка игр */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GamesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Данные для создания игры */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["CreateGameDto"];
            };
        };
        responses: {
            /** @description Игра успешно создана */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для создания игры */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Игра с таким названием уже существует для данного провайдера */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при создании игры */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GamesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Игра найдена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Game"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра информации об игре */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Игра с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при получении игры по ID */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GamesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Игра успешно удалена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для удаления игры */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Игра с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при удалении игры */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GamesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        /** @description Данные для обновления игры */
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpdateGameDto"];
            };
        };
        responses: {
            /** @description Данные игры успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для изменения данных игры */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Игра с указанным ID не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при обновлении данных игры */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatchNotesController_findAll: {
        parameters: {
            query?: {
                /** @description ID игры для фильтрации */
                gameId?: string;
                /** @description ID приложения для фильтрации */
                appId?: string;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список патч-нотов получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetPatchNotesResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра списка патч-нотов */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Ошибка сервера при получении списка патч-нотов */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatchNotesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePatchNoteDto"];
            };
        };
        responses: {
            /** @description Патч-нот успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для создания патч-нота */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Патч-нот с таким названием уже существует */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при создании патч-нота */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatchNotesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Патч-нот найден */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра информации о патч-ноте */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Патч-нот с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при получении патч-нота */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatchNotesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Патч-нот успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для удаления патч-нота */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Патч-нот с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при удалении патч-нота */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PatchNotesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePatchNoteDto"];
            };
        };
        responses: {
            /** @description Данные патч-нота успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для изменения данных патч-нота */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Патч-нот с указанным ID не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при обновлении патч-нота */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_getGames: {
        parameters: {
            query?: {
                appId?: string;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список игр получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetGamesResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    SubscriptionsController_findAll: {
        parameters: {
            query?: {
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список подписок получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionsResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра подписок */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Ошибка сервера при получении подписок */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionDto"];
            };
        };
        responses: {
            /** @description Подписка успешно создана */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponseDto"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для создания подписки */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Ошибка сервера при создании подписки */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                gameId: string;
                appId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Подписка найдена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра информации о подписке */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Подписка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при получении подписки */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Подписка успешно удалена */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для удаления подписки */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Подписка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при удалении подписки */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubscriptionsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSubscriptionDto"];
            };
        };
        responses: {
            /** @description Данные подписки успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubscriptionResponseDto"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для изменения данных подписки */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Подписка не найдена */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при обновлении подписки */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppsController_findAll: {
        parameters: {
            query?: {
                /** @description Фильтр по имени приложения */
                name?: string;
                /** @description Фильтр по ID игры, к которой привязано приложение */
                gameId?: string;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список приложений получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра списка приложений */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AppsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    name?: string;
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description Приложение успешно создано */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для создания приложения */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AppsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Приложение найдено */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для просмотра информации о приложении */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Приложение с указанным ID не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    AppsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Приложение успешно удалено */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для удаления приложения */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Приложение с указанным ID не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Ошибка сервера при удалении приложения */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AppsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    name?: string;
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description Данные приложения успешно обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["App"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для изменения данных приложения */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Приложение с указанным ID не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    SettingsController_getSettings: {
        parameters: {
            query: {
                appId: string;
                gameId: string;
                /** @description Номер страницы */
                page?: number;
                /** @description Количество записей для одной страницы */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Настройки найдены и возвращены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSettingsResponseDto"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для запроса настроек */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    SettingsController_createSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSettingsDto"];
            };
        };
        responses: {
            /** @description Настройки успешно созданы */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для создания настроек */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Настройки с таким сочетанием игры и приложения уже существуют */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingsController_getSettingsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Настройки найдены и возвращены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для запроса настроек */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Настроек с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingsController_deleteSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Настройки успешно удалены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Недостаточно прав для удаления настроек */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Настроек с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SettingsController_updateSettings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description id */
                "ID \u0417\u0430\u043F\u0438\u0441\u0438 \u043D\u0430\u0441\u0442\u0440\u043E\u0435\u043A": string;
            };
            cookie?: never;
        };
        /** @description Входные данные для изменения записи настроек */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSettingsDto"];
            };
        };
        responses: {
            /** @description Настройки успешно изменены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Settings"];
                };
            };
            /** @description Некорректные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для изменения настроек */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Настроек с таким ID не существует */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UpdatesController_requestUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUpdateRequestDto"];
            };
        };
        responses: {
            /** @description Запрос на обновление успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateRequest"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для создания запроса на обновление */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UpdatesController_requestUpdateSystem: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUpdateRequestWithSystemDto"];
            };
        };
        responses: {
            /** @description Запрос на обновление успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateRequest"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Недостаточно прав для создания запроса на обновление */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UpdatesController_getUpdateRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID запроса на обновление */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Запрос на обновление успешно получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateRequest"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UpdatesController_deleteUpdateRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID запроса на обновление */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Запрос на обновление успешно удален */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
    UpdatesController_getUpdateRequests: {
        parameters: {
            query?: {
                /** @description Номер страницы, начиная с 1 */
                page?: number;
                /** @description Количество элементов на странице */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список запросов на обновление успешно получен */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetUpdateRequestsResponseDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestResponseDto"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ForbiddenResponseDto"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotFoundResponseDto"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InternalServerErrorResponseDto"];
                };
            };
        };
    };
}
